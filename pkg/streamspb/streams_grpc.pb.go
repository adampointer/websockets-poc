// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: streams.proto

package streamspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStreamerClient is the client API for EventStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventStreamer_SubscribeClient, error)
}

type eventStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamerClient(cc grpc.ClientConnInterface) EventStreamerClient {
	return &eventStreamerClient{cc}
}

func (c *eventStreamerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (EventStreamer_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStreamer_ServiceDesc.Streams[0], "/streams.EventStreamer/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamerSubscribeClient{stream}
	return x, nil
}

type EventStreamer_SubscribeClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type eventStreamerSubscribeClient struct {
	grpc.ClientStream
}

func (x *eventStreamerSubscribeClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventStreamerSubscribeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamerServer is the server API for EventStreamer service.
// All implementations must embed UnimplementedEventStreamerServer
// for forward compatibility
type EventStreamerServer interface {
	Subscribe(EventStreamer_SubscribeServer) error
	mustEmbedUnimplementedEventStreamerServer()
}

// UnimplementedEventStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedEventStreamerServer struct {
}

func (UnimplementedEventStreamerServer) Subscribe(EventStreamer_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventStreamerServer) mustEmbedUnimplementedEventStreamerServer() {}

// UnsafeEventStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamerServer will
// result in compilation errors.
type UnsafeEventStreamerServer interface {
	mustEmbedUnimplementedEventStreamerServer()
}

func RegisterEventStreamerServer(s grpc.ServiceRegistrar, srv EventStreamerServer) {
	s.RegisterService(&EventStreamer_ServiceDesc, srv)
}

func _EventStreamer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStreamerServer).Subscribe(&eventStreamerSubscribeServer{stream})
}

type EventStreamer_SubscribeServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type eventStreamerSubscribeServer struct {
	grpc.ServerStream
}

func (x *eventStreamerSubscribeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventStreamerSubscribeServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamer_ServiceDesc is the grpc.ServiceDesc for EventStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streams.EventStreamer",
	HandlerType: (*EventStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventStreamer_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streams.proto",
}
